[1mdiff --git a/app/api_structures.py b/app/api_structures.py[m
[1mindex a73c780..30ab28c 100644[m
[1m--- a/app/api_structures.py[m
[1m+++ b/app/api_structures.py[m
[36m@@ -4,17 +4,17 @@[m [mfrom typing import List[m
 import requests[m
 [m
 # Import classes[m
[31m-from functions import FunctionStructure[m
[32m+[m[32mfrom app.functions import FunctionStructure[m
 [m
 class APIStructure:[m
[31m-    def __init__(self, api_key: str, function: str, symbols: List[str], *args):[m
[32m+[m[32m    def __init__(self, api_key: str, function: str, symbol: List[str], more_params: dict):[m
         self.app = FastAPI()[m
         self.setup_routes()[m
         self.base_url = "https://www.alphavantage.co/query"[m
[31m-        api_key = api_key[m
[32m+[m[32m        self.api_key = api_key[m
         self.function = function[m
[31m-        self.symbols = symbols[m
[31m-        self.more_params = args[m
[32m+[m[32m        self.symbol = symbol[m
[32m+[m[32m        self.more_params = more_params[m
 [m
     def setup_routes(self):[m
         """[m
[36m@@ -26,19 +26,20 @@[m [mclass APIStructure:[m
             responses={400: {"model": ErrorResponse}, 500: {"model": ErrorResponse}},[m
         )[m
         async def get_intraday_stock_data([m
[31m-            symbols: List[str] = Query(["AAPL"], description="List of stock symbols (e.g., AAPL, MSFT)"),[m
[32m+[m[32m            symbol: List[str] = Query(["AAPL"], description="List of stock symbols (e.g., AAPL, MSFT)"),[m
             interval: str = Query("5min", description="Time interval (e.g., 1min, 5min, 15min, 30min, 60min)"),[m
         ):[m
 [m
[32m+[m[32m            print(self.more_params["interval"])[m
             params = {[m
                 "function": self.function,[m
[31m-                "symbol": self.symbols,[m
[32m+[m[32m                "symbol": self.symbol,[m
                 "apikey": self.api_key,[m
                 "interval": self.more_params["interval"][m
             }[m
 [m
             used_function = FunctionStructure(self.function)[m
[31m-            function_param = used_function.function_rules(self.function, params)[m
[32m+[m[32m            function_param = used_function.function_rules()[m
 [m
             try:[m
                 # Raise issue if limitations symbols are exceeded[m
[36m@@ -57,7 +58,7 @@[m [mclass APIStructure:[m
                     raise HTTPException(status_code=400, detail=data["Error Message"])[m
 [m
                 if not data.get(f"Time Series ({interval})"):[m
[31m-                    raise HTTPException(status_code=404, detail=f"No intraday data found for {symbols} at {interval}")[m
[32m+[m[32m                    raise HTTPException(status_code=404, detail=f"No intraday data found for {symbol} at {interval}")[m
 [m
                 # Structure the response according to the Pydantic model[m
                 metadata = data.get("Meta Data", {})[m
[36m@@ -79,29 +80,29 @@[m [mclass APIStructure:[m
             except Exception as e:[m
                 raise HTTPException(status_code=500, detail=f"An unexpected error occurred: {e}")[m
 [m
[31m-        def handle_errors(self, function_param, params):[m
[31m-            """[m
[31m-            Handle errors based on function parameters.[m
[31m-            """[m
[31m-            # Check if the number of symbols exceeds the limit[m
[31m-            if function_param["symbols"] < len(self.symbols):[m
[31m-                print(f"Exceeded the limit of {function_param['symbols']} symbol(s).")[m
[31m-                return False[m
[31m-[m
[31m-            # Handle parameter requirements[m
[31m-            if function_param["required"]:[m
[31m-                for param in params:[m
[31m-                    if param not in function_param["required"]:[m
[31m-                        print(f"Missing required parameter: {param}")[m
[31m-                        return False[m
[31m-[m
[31m-[m
[31m-            # Check if the time delay limit is exceeded[m
[31m-            if function_param["time delay limit"] < 5:[m
[31m-                print(f"Exceeded the time delay limit of {function_param['time delay limit']} seconds.")[m
[31m-                return False[m
[31m-[m
[31m-            return True[m
[32m+[m[32m    def handle_errors(self, function_param, params):[m
[32m+[m[32m        """[m
[32m+[m[32m        Handle errors based on function parameters.[m
[32m+[m[32m        """[m
[32m+[m[32m        # Check if the number of symbols exceeds the limit[m
[32m+[m[32m        if function_param["symbol"] < len(self.symbol):[m
[32m+[m[32m            print(f"Exceeded the limit of {function_param['symbol']} symbol(s).")[m
[32m+[m[32m            return False[m
[32m+[m
[32m+[m[32m        # Handle parameter requirements[m
[32m+[m[32m        if function_param["required"]:[m
[32m+[m[32m            for param in params:[m
[32m+[m[32m                if param not in function_param["required"]:[m
[32m+[m[32m                    print(f"Missing required parameter: {param}")[m
[32m+[m[32m                    return False[m
[32m+[m
[32m+[m
[32m+[m[32m        # Check if the time delay limit is exceeded[m
[32m+[m[32m        if function_param["time delay limit"] < 5:[m
[32m+[m[32m            print(f"Exceeded the time delay limit of {function_param['time delay limit']} seconds.")[m
[32m+[m[32m            return False[m
[32m+[m
[32m+[m[32m        return True[m
 [m
 class StockPriceData(BaseModel):[m
     """Represents the structure of the intraday stock price data."""[m
[1mdiff --git a/app/functions.py b/app/functions.py[m
[1mindex 09226ca..e051bdf 100644[m
[1m--- a/app/functions.py[m
[1m+++ b/app/functions.py[m
[36m@@ -4,28 +4,27 @@[m [mclass FunctionStructure:[m
     Class to define function rules for the api.[m
     """[m
 [m
[31m-    def __init__(self, function: str, params: dict):[m
[32m+[m[32m    def __init__(self, function: str):[m
 [m
         self.function = function[m
[31m-        self.params = params[m
 [m
[31m-        def function_rules(self, function: str, params: dict):[m
[32m+[m[32m    def function_rules(self):[m
 [m
[31m-            limitations = {[m
[31m-                "TIME_SERIES_INTRADAY": {[m
[31m-                    "max_symbols": 5,[m
[31m-                    "intervals": ["1min", "5min", "15min", "30min", "60min"],[m
[31m-                    "required": ["function","symbols", "interval"],[m
[31m-                    "limit": 1000[m
[31m-                },[m
[31m-                "ANALYTICS_FIXED_WINDOW": {[m
[31m-                    "max_symbols": 10,[m
[31m-                    "range": ["full","day", "week", "month", "year"],[m
[31m-                    "required": ["function","symbols", "range"],[m
[31m-                    "limit": 500[m
[31m-                },[m
[32m+[m[32m        limitations = {[m
[32m+[m[32m            "TIME_SERIES_INTRADAY": {[m
[32m+[m[32m                "max_symbols": 5,[m
[32m+[m[32m                "intervals": ["1min", "5min", "15min", "30min", "60min"],[m
[32m+[m[32m                "required": ["function","symbol", "interval"],[m
[32m+[m[32m                "limit": 1000[m
[32m+[m[32m            },[m
[32m+[m[32m            "ANALYTICS_FIXED_WINDOW": {[m
[32m+[m[32m                "max_symbols": 10,[m
[32m+[m[32m                "range": ["full","day", "week", "month", "year"],[m
[32m+[m[32m                "required": ["function","symbol", "range"],[m
[32m+[m[32m                "limit": 500[m
[32m+[m[32m            },[m
 [m
[31m-                # Add more functions and their limitations as needed[m
[31m-            }[m
[32m+[m[32m            # Add more functions and their limitations as needed[m
[32m+[m[32m        }[m
 [m
[31m-            return limitations.get(function, {})[m
[32m+[m[32m        return limitations.get(self.function, {})[m
[1mdiff --git a/main.py b/main.py[m
[1mindex 96848c2..c7683ca 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -3,10 +3,8 @@[m [mimport os[m
 import requests[m
 [m
 #import class[m
[31m-from app.functions import Functions[m
 from app.api_structures import APIStructure[m
 [m
[31m-[m
 dotenv.load_dotenv()[m
 api_key = os.getenv("ALPHA_VANTAGE_API_KEY")[m
 [m
